{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { StatusBar } from 'expo-status-bar';\nimport { Ionicons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport LoginScreen from \"./src/screens/LoginScreen\";\nimport ChatListScreen from \"./src/screens/ChatListScreen\";\nimport ChatScreen from \"./src/screens/ChatScreen\";\nimport ProfileScreen from \"./src/screens/ProfileScreen\";\nimport { AuthProvider, useAuth } from \"./src/context/AuthContext\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar Tab = createBottomTabNavigator();\nfunction MainTabs() {\n  var _useAuth = useAuth(),\n    user = _useAuth.user;\n  return _jsxs(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n            color = _ref2.color,\n            size = _ref2.size;\n          var iconName;\n          if (route.name === 'Chats') {\n            iconName = focused ? 'chatbubbles' : 'chatbubbles-outline';\n          } else if (route.name === 'Profile') {\n            iconName = focused ? 'person' : 'person-outline';\n          }\n          return _jsx(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        },\n        tabBarActiveTintColor: '#007AFF',\n        tabBarInactiveTintColor: 'gray',\n        headerStyle: {\n          backgroundColor: '#007AFF'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold'\n        }\n      };\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Chats\",\n      component: ChatListScreen,\n      options: {\n        title: 'Messages'\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Profile\",\n      component: ProfileScreen,\n      options: {\n        title: (user == null ? void 0 : user.name) || 'Profile'\n      }\n    })]\n  });\n}\nfunction AppContent() {\n  var _useAuth2 = useAuth(),\n    isAuthenticated = _useAuth2.isAuthenticated,\n    loading = _useAuth2.loading;\n  if (loading) {\n    return null;\n  }\n  return _jsx(NavigationContainer, {\n    children: _jsx(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: !isAuthenticated ? _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      }) : _jsxs(_Fragment, {\n        children: [_jsx(Stack.Screen, {\n          name: \"MainTabs\",\n          component: MainTabs\n        }), _jsx(Stack.Screen, {\n          name: \"Chat\",\n          component: ChatScreen,\n          options: function options(_ref3) {\n            var _route$params;\n            var route = _ref3.route;\n            return {\n              headerShown: true,\n              title: ((_route$params = route.params) == null ? void 0 : _route$params.userName) || 'Chat',\n              headerStyle: {\n                backgroundColor: '#007AFF'\n              },\n              headerTintColor: '#fff'\n            };\n          }\n        })]\n      })\n    })\n  });\n}\nexport default function App() {\n  return _jsxs(AuthProvider, {\n    children: [_jsx(AppContent, {}), _jsx(StatusBar, {\n      style: \"light\"\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","NavigationContainer","createStackNavigator","createBottomTabNavigator","StatusBar","Ionicons","AsyncStorage","LoginScreen","ChatListScreen","ChatScreen","ProfileScreen","AuthProvider","useAuth","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Stack","Tab","MainTabs","_useAuth","user","Navigator","screenOptions","_ref","route","tabBarIcon","_ref2","focused","color","size","iconName","name","tabBarActiveTintColor","tabBarInactiveTintColor","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","fontWeight","children","Screen","component","options","title","AppContent","_useAuth2","isAuthenticated","loading","headerShown","_ref3","_route$params","params","userName","App","style"],"sources":["/Users/andrewfreeman/Documents/GitHub/messenger/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { StatusBar } from 'expo-status-bar';\nimport { Ionicons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport LoginScreen from './src/screens/LoginScreen';\nimport ChatListScreen from './src/screens/ChatListScreen';\nimport ChatScreen from './src/screens/ChatScreen';\nimport ProfileScreen from './src/screens/ProfileScreen';\nimport { AuthProvider, useAuth } from './src/context/AuthContext';\n\nconst Stack = createStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nfunction MainTabs() {\n  const { user } = useAuth();\n\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName;\n\n          if (route.name === 'Chats') {\n            iconName = focused ? 'chatbubbles' : 'chatbubbles-outline';\n          } else if (route.name === 'Profile') {\n            iconName = focused ? 'person' : 'person-outline';\n          }\n\n          return <Ionicons name={iconName} size={size} color={color} />;\n        },\n        tabBarActiveTintColor: '#007AFF',\n        tabBarInactiveTintColor: 'gray',\n        headerStyle: {\n          backgroundColor: '#007AFF',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      })}\n    >\n      <Tab.Screen \n        name=\"Chats\" \n        component={ChatListScreen}\n        options={{ title: 'Messages' }}\n      />\n      <Tab.Screen \n        name=\"Profile\" \n        component={ProfileScreen}\n        options={{ title: user?.name || 'Profile' }}\n      />\n    </Tab.Navigator>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated, loading } = useAuth();\n\n  if (loading) {\n    return null; // You can add a loading screen here\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        {!isAuthenticated ? (\n          <Stack.Screen name=\"Login\" component={LoginScreen} />\n        ) : (\n          <>\n            <Stack.Screen name=\"MainTabs\" component={MainTabs} />\n            <Stack.Screen \n              name=\"Chat\" \n              component={ChatScreen}\n              options={({ route }) => ({ \n                headerShown: true,\n                title: route.params?.userName || 'Chat',\n                headerStyle: {\n                  backgroundColor: '#007AFF',\n                },\n                headerTintColor: '#fff',\n              })}\n            />\n          </>\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default function App() {\n  return (\n    <AuthProvider>\n      <AppContent />\n      <StatusBar style=\"light\" />\n    </AuthProvider>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}